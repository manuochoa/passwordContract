{"version":3,"sources":["components/blockchain/web3.js","components/blockchain/interfaces/ERC20.js","components/blockchain/interfaces/password.js","components/blockchain/interfaces/deployer.js","components/blockchain/interfaces/hash.js","components/blockchain/functions/functions.js","components/deployer/index.js","components/token/index.js","components/password/index.js","ColorModeSwitcher.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["web3","Web3","require","window","ethereum","givenProvider","alert","instance","_address","eth","Contract","ERC20","abi","Password","deployer","hash","ethEnabled","a","request","method","user","message","deployPassword","_password","_tokLimit","_addrLimit","_tokenAddress","Deployer","limit","utils","toWei","methods","createPassword","send","from","selectedAddress","receipt","deployToken","_name","_symbol","createToken","MintTokens","_to","_amount","_contractAddress","amount","mint","setMinter","_minter","_status","setIsMinter","checkIsMinter","isMinter","call","newLimits","changeLimits","newPassword","_passwordCode","changePassword","shouldMint","changeShouldMint","setTokenContract","changeTokenContract","claim","claimToken","Info","_passwordAddress","addrLimit","addressLimit","countClaims","tokenAddress","addressToken","tokLimit","tokenLimit","owner","isMinting","Hash","_text","getHash","useState","name","symbol","tokenInfo","setTokenInfo","password","toknLimit","tknAddr","passwordInfo","setPasswordInfo","text","result","setHash","isSending","setIsSending","handleDeployToken","events","tokenDeploy","returnValues","newTokenAddress","console","log","handleDeployPassword","checkFields","passwordDeploy","newPasswordAddress","handleHash","maxW","marginBottom","placeholder","value","onChange","e","target","onClick","fontSize","readOnly","Token","setTokenAddress","recipient","mintInfo","setMintInfo","address","status","isMinterInfo","setIsMinterInfo","checkMinter","setCheckMinter","handleMint","Transfer","to","handleSetMinter","handleCheckMinter","error","onPaste","contractAddress","setContractAddress","setPassword","info","setInfo","newParams","setNewParams","isEditing","setIsEditing","handleClaim","handleNewLimits","handleNewTokenContract","handleNewPassword","handleIsMinting","getInfo","toString","toUpperCase","ColorModeSwitcher","props","toggleColorMode","useColorMode","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","variant","color","marginLeft","icon","App","accounts","setAccounts","handleLogin","theme","textAlign","justifyContent","substring","isFitted","mb","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"6p/uDAEIA,E,uHAFEC,EAAOC,EAAQ,KAIC,qBAAXC,QAAqD,qBAApBA,OAAOC,SAEjDJ,EAAO,IAAIC,EAAKA,EAAKI,eAIrBF,OAAOG,MAAM,2BAOAN,Q,SCVAO,MAJf,SAAkBC,GAChB,OAAO,IAAIR,EAAKS,IAAIC,SAASC,EAAMC,IAAKJ,I,SCG3BD,MAJf,SAAkBC,GAChB,OAAO,IAAIR,EAAKS,IAAIC,SAASG,EAASD,IAAKJ,I,SCK9BD,MAJf,WACE,OAAO,IAAIP,EAAKS,IAAIC,SAASI,EAASF,IAHhB,+C,SCMTL,MAJf,WACE,OAAO,IAAIP,EAAKS,IAAIC,SAASK,EAAKH,IAHhB,+CCGZR,EAAaD,OAAbC,SAEKY,EAAU,uCAAG,4BAAAC,EAAA,+EAELb,EAASc,QAAQ,CAAEC,OAAQ,wBAFtB,cAElBC,EAFkB,yBAGfA,GAHe,gCAKtBjB,OAAOG,MAAM,KAAMe,SALG,yDAAH,qDASVC,EAAc,uCAAG,WAC5BC,EACAC,EACAC,EACAC,GAJ4B,mBAAAT,EAAA,sEAMPU,IANO,cAMxBpB,EANwB,OAOxBqB,EAAQ5B,EAAK6B,MAAMC,MAAMN,GAPD,kBASNjB,EAASwB,QAC1BC,eAAeT,EAAWK,EAAOH,EAAYC,GAC7CO,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBAXN,cAStBC,EATsB,yBAYnBA,GAZmB,kCAc1BjC,OAAOG,MAAM,KAAMe,SAdO,0DAAH,4DAkBdgB,EAAW,uCAAG,WAAOC,EAAOC,GAAd,iBAAAtB,EAAA,sEACJU,IADI,cACrBpB,EADqB,yBAGHA,EAASwB,QAC1BS,YAAYF,EAAOC,GACnBN,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBALT,cAGnBC,EAHmB,yBAMhBA,GANgB,kCAQvBjC,OAAOG,MAAM,KAAMe,SARI,0DAAH,wDAgCXoB,EAAU,uCAAG,WAAOC,EAAKC,EAASC,GAArB,mBAAA3B,EAAA,sEACHN,EAAMiC,GADH,cACpBrC,EADoB,gBAGlBsC,EAAS7C,EAAK6B,MAAMC,MAAMa,GAHR,SAIFpC,EAASwB,QAC1Be,KAAKJ,EAAKG,GACVZ,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBANV,cAIlBC,EAJkB,yBAOfA,GAPe,kCAStBjC,OAAOG,MAAM,KAAMe,SATG,0DAAH,0DAaV0B,EAAS,uCAAG,WAAOC,EAASC,EAASL,GAAzB,iBAAA3B,EAAA,sEACFN,EAAMiC,GADJ,cACnBrC,EADmB,yBAGDA,EAASwB,QAC1BmB,YAAYF,EAASC,GACrBhB,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBALX,cAGjBC,EAHiB,yBAMdA,GANc,kCAQrBjC,OAAOG,MAAM,KAAMe,SARE,0DAAH,0DAYT8B,EAAa,uCAAG,WAAO3C,EAAUoC,GAAjB,iBAAA3B,EAAA,sEACNN,EAAMiC,GADA,cACvBrC,EADuB,yBAGLA,EAASwB,QAAQqB,SAAS5C,GAAU6C,OAH/B,cAGrBjB,EAHqB,yBAIlBA,GAJkB,kCAMzBjC,OAAOG,MAAM,KAAMe,SANM,0DAAH,wDAUbiC,EAAS,uCAAG,WAAO9B,EAAWC,EAAYmB,GAA9B,mBAAA3B,EAAA,sEACFJ,EAAS+B,GADP,cACnBrC,EADmB,gBAGjBqB,EAAQ5B,EAAK6B,MAAMC,MAAMN,GAHR,SAIDjB,EAASwB,QAC1BwB,aAAa3B,EAAOH,GACpBQ,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBANX,cAIjBC,EAJiB,yBAOdA,GAPc,kCASrBjC,OAAOG,MAAM,KAAMe,SATE,0DAAH,0DAaTmC,EAAW,uCAAG,WAAOC,EAAeb,GAAtB,iBAAA3B,EAAA,sEACJJ,EAAS+B,GADL,cACrBrC,EADqB,yBAGHA,EAASwB,QAC1B2B,eAAeD,GACfxB,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBALT,cAGnBC,EAHmB,yBAMhBA,GANgB,kCAQvBjC,OAAOG,MAAM,KAAMe,SARI,0DAAH,wDAYXsC,EAAU,uCAAG,WAAOV,EAASL,GAAhB,iBAAA3B,EAAA,sEACHJ,EAAS+B,GADN,cACpBrC,EADoB,yBAGFA,EAASwB,QAC1B6B,iBAAiBX,GACjBhB,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBALV,cAGlBC,EAHkB,yBAMfA,GANe,kCAQtBjC,OAAOG,MAAM,KAAMe,SARG,0DAAH,wDAYVwC,EAAgB,uCAAG,WAAOnC,EAAekB,GAAtB,iBAAA3B,EAAA,sEACTJ,EAAS+B,GADA,cAC1BrC,EAD0B,yBAGRA,EAASwB,QAC1B+B,oBAAoBpC,GACpBO,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBALJ,cAGxBC,EAHwB,yBAMrBA,GANqB,kCAQ5BjC,OAAOG,MAAM,KAAMe,SARS,0DAAH,wDAYhB0C,EAAK,uCAAG,WAAOxC,EAAWqB,GAAlB,iBAAA3B,EAAA,sEACEJ,EAAS+B,GADX,cACfrC,EADe,yBAGGA,EAASwB,QAC1BiC,WAAWzC,GACXU,KAAK,CAAEC,KAAM/B,OAAOC,SAAS+B,kBALf,cAGbC,EAHa,yBAMVA,GANU,yCAQjBjC,OAAOG,MAAM,KAAMe,SARF,mBASV,GATU,0DAAH,wDAaL4C,EAAI,uCAAG,WAAMC,GAAN,2BAAAjD,EAAA,sEACGJ,EAASqD,GADZ,cACd3D,EADc,yBAISA,EAASwB,QAAQoC,YAAYd,OAJtC,cAIZe,EAJY,gBAKQ7D,EAASwB,QAC9BsC,YAAYlE,OAAOC,SAAS+B,iBAC5BkB,OAPa,cAKZgB,EALY,iBAQS9D,EAASwB,QAAQuC,eAAejB,OARzC,eAQZkB,EARY,iBASOhE,EAASwB,QAAQyC,WAAWnB,OATnC,eASZoB,EATY,iBAUElE,EAASwB,QAAQ2C,QAAQrB,OAV3B,eAUZqB,EAVY,iBAWMnE,EAASwB,QAAQ4B,aAAaN,OAXpC,eAWZsB,EAXY,yBAaT,CACLP,eACAC,cACAE,eACAE,aACAC,QACAC,cAnBc,kCAsBhBxE,OAAOG,MAAM,KAAMe,SAtBH,0DAAH,sDA0BJuD,EAAI,uCAAG,WAAMC,GAAN,iBAAA5D,EAAA,sEACGF,IADH,cACdR,EADc,yBAGIA,EAASwB,QAAQ+C,QAAQD,GAAOxB,OAHpC,cAGZjB,EAHY,yBAKTA,GALS,kCAOhBjC,OAAOG,MAAM,KAAMe,SAPH,0DAAH,sD,4DCtBFM,MAxJf,WACE,MAAkCoD,mBAAS,CACzCC,KAAM,GACNC,OAAQ,KAFV,mBAAOC,EAAP,KAAkBC,EAAlB,KAIA,EAAwCJ,mBAAS,CAC/CK,SAAU,GACVC,UAAW,GACXlB,UAAW,GACXmB,QAAS,KAJX,mBAAOC,EAAP,KAAqBC,EAArB,KAMA,EAAwBT,mBAAS,CAC/BU,KAAM,GACNC,OAAQ,KAFV,mBAAO3E,EAAP,KAAa4E,EAAb,KAIA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KAEMC,EAAiB,uCAAG,4BAAA7E,EAAA,6DACxB4E,GAAa,GADW,SAEJxD,EAAY6C,EAAUF,KAAME,EAAUD,QAFlC,QAEpB7C,EAFoB,UAItBjC,OAAOG,MAAP,yCACoC8B,EAAQ2D,OAAOC,YAAYC,aAAaC,gBAD5E,kCAGAC,QAAQC,IAAIhE,IAEdyD,GAAa,GATW,2CAAH,qDAWjBQ,EAAoB,uCAAG,4BAAApF,EAAA,yDAC3B4E,GAAa,IACTS,IAFuB,gCAGLhF,EAClBiE,EAAaH,SACbG,EAAaF,UACbE,EAAapB,UACboB,EAAaD,SAPU,QAGrBlD,EAHqB,UAUvB+D,QAAQC,IAAIhE,GACZjC,OAAOG,MAAP,4CACuC8B,EAAQ2D,OAAOQ,eAAeN,aAAaO,mBADlF,mCAXuB,OAgB3BX,GAAa,GAhBc,2CAAH,qDAkBpBY,EAAU,uCAAG,4BAAAxF,EAAA,sEACE2D,EAAK7D,EAAK0E,MADZ,QACbC,EADa,SAGfF,EAAgB,2BACXD,GADU,IAEbH,SAAUM,KALG,2CAAH,qDAUVY,EAAc,WAClB,IAAMlB,EAA4CG,EAA5CH,SAAUC,EAAkCE,EAAlCF,UAAWlB,EAAuBoB,EAAvBpB,UAAWmB,EAAYC,EAAZD,QACtC,MACe,KAAbF,GACc,KAAdC,GACc,KAAdlB,GACY,KAAZmB,IAIAnF,OAAOG,MAAM,mCACN,IAIX,OACE,eAAC,IAAD,CAAWoG,KAAK,eAAhB,UACE,eAAC,IAAD,CAAWA,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,2BACA,cAAC,IAAD,CACEC,YAAY,OACZC,MAAO3B,EAAUF,KACjB8B,SAAU,SAAAC,GAAC,OACT5B,EAAa,2BACRD,GADO,IAEVF,KAAM+B,EAAEC,OAAOH,YAIrB,cAAC,IAAD,CACED,YAAY,SACZC,MAAO3B,EAAUD,OACjB6B,SAAU,SAAAC,GAAC,OACT5B,EAAa,2BACRD,GADO,IAEVD,OAAQ8B,EAAEC,OAAOH,YAIvB,eAAC,IAAD,CAAQI,QAASnB,EAAjB,UACG,IACAF,EAAY,cAAC,IAAD,IAAc,eAG/B,eAAC,IAAD,CAAWc,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,uCACA,cAAC,IAAD,CAAMO,SAAS,KAAf,0BACA,cAAC,IAAD,CACEN,YAAY,kBACZC,MAAO9F,EAAK0E,KACZqB,SAAU,SAAAC,GAAC,OAAIpB,EAAQ,2BAAK5E,GAAN,IAAY0E,KAAMsB,EAAEC,OAAOH,YAGnD,cAAC,IAAD,CAAQI,QAASR,EAAjB,kBACA,cAAC,IAAD,CAAOG,YAAY,eAAYC,MAAOtB,EAAaH,SAAU+B,UAAQ,IACrE,cAAC,IAAD,UACE,cAAC,IAAD,CACEP,YAAY,cACZC,MAAOtB,EAAaF,UACpByB,SAAU,SAAAC,GAAC,OACTvB,EAAgB,2BACXD,GADU,IAEbF,UAAW0B,EAAEC,OAAOH,cAK5B,cAAC,IAAD,UACE,cAAC,IAAD,CACED,YAAY,gBACZC,MAAOtB,EAAapB,UACpB2C,SAAU,SAAAC,GAAC,OACTvB,EAAgB,2BACXD,GADU,IAEbpB,UAAW4C,EAAEC,OAAOH,cAK5B,cAAC,IAAD,CACED,YAAY,gBACZC,MAAOtB,EAAaD,QACpBwB,SAAU,SAAAC,GAAC,OACTvB,EAAgB,2BAAKD,GAAN,IAAoBD,QAASyB,EAAEC,OAAOH,YAGzD,eAAC,IAAD,CAAQI,QAASZ,EAAjB,UACG,IACAT,EAAY,cAAC,IAAD,IAAc,eAG/B,cAAC,IAAD,CAAWc,KAAK,eAAeC,aAAa,UCPnCS,MA5If,WACE,MAAwCrC,mBAAS,IAAjD,mBAAOT,EAAP,KAAqB+C,EAArB,KACA,EAAkCtC,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAgCd,mBAAS,CACvCuC,UAAW,GACXzE,OAAQ,KAFV,mBAAO0E,EAAP,KAAiBC,EAAjB,KAIA,EAAwCzC,mBAAS,CAC/C0C,QAAS,GACTC,OAAQ,KAFV,mBAAOC,EAAP,KAAqBC,EAArB,KAIA,EAAsC7C,mBAAS,CAC7C0C,QAAS,GACTC,OAAQ,KAFV,mBAAOG,EAAP,KAAoBC,EAApB,KAKMC,EAAU,uCAAG,4BAAA9G,EAAA,6DACjB4E,GAAa,GADI,SAEGpD,EAClB8E,EAASD,UACTC,EAAS1E,OACTyB,GALe,QAEblC,EAFa,UAQfjC,OAAOG,MAAP,iCAEI8B,EAAQ2D,OAAOiC,SAAS/B,aAAaY,MAAQ,KAFjD,yCAIIzE,EAAQ2D,OAAOiC,SAAS/B,aAAagC,KAGzC9B,QAAQC,IAAIhE,IAEdyD,GAAa,GAjBI,2CAAH,qDAoBVqC,EAAe,uCAAG,4BAAAjH,EAAA,yDACtB4E,GAAa,GACe,SAAxB8B,EAAaD,QAA6C,UAAxBC,EAAaD,OAF7B,uBAGpBvH,OAAOG,MAAM,mCAHO,0CAMFyC,EAClB4E,EAAaF,QACbE,EAAaD,OACbpD,GAToB,QAMlBlC,EANkB,UAYpBjC,OAAOG,MAAM,iCACb6F,QAAQC,IAAIhE,IAEdyD,GAAa,GAfS,2CAAH,qDAkBfsC,EAAiB,uCAAG,4BAAAlH,EAAA,sEACJkC,EAAc0E,EAAYJ,QAASnD,GAD/B,OACpBlC,EADoB,OAExB,IACE0F,EAAe,2BAAKA,GAAN,IAAsBJ,OAAQtF,KAC5C,MAAOgG,GACPjC,QAAQC,IAAIgC,GALU,2CAAH,qDASvB,OACE,eAAC,IAAD,CAAW1B,KAAK,eAAhB,UACE,eAAC,IAAD,CAAWA,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,4BACA,cAAC,IAAD,CACEC,YAAY,gBACZC,MAAOvC,EACPwC,SAAU,SAAAC,GAAC,OAAIM,EAAgBN,EAAEC,OAAOH,aAI5C,eAAC,IAAD,CAAWH,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,yBACA,cAAC,IAAD,CACEC,YAAY,oBACZC,MAAOU,EAASD,UAChBR,SAAU,SAAAC,GAAC,OACTS,EAAY,2BAAKD,GAAN,IAAgBD,UAAWP,EAAEC,OAAOH,YAGnD,cAAC,IAAD,UACE,cAAC,IAAD,CACED,YAAY,iBACZC,MAAOU,EAAS1E,OAChBiE,SAAU,SAAAC,GAAC,OAAIS,EAAY,2BAAKD,GAAN,IAAgB1E,OAAQkE,EAAEC,OAAOH,cAG/D,eAAC,IAAD,CAAQI,QAASc,EAAjB,UACGnC,EAAY,cAAC,IAAD,IAAc,OAAQ,UAIvC,eAAC,IAAD,CAAWc,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,8BACA,cAAC,IAAD,CACEC,YAAY,iBACZC,MAAOc,EAAaF,QACpBX,SAAU,SAAAC,GAAC,OACTa,EAAgB,2BAAKD,GAAN,IAAoBF,QAASV,EAAEC,OAAOH,YAGzD,cAAC,IAAD,CACED,YAAY,wBACZC,MAAOc,EAAaD,OACpBZ,SAAU,SAAAC,GAAC,OACTa,EAAgB,2BAAKD,GAAN,IAAoBD,OAAQX,EAAEC,OAAOH,YAGxD,eAAC,IAAD,CAAQI,QAASiB,EAAjB,UACG,IACAtC,EAAY,cAAC,IAAD,IAAc,mBAI/B,eAAC,IAAD,CAAWc,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,gCACA,cAAC,IAAD,CACEC,YAAY,iBACZC,MAAOgB,EAAYJ,QACnBY,QAAS,SAAAtB,GAAC,OACRe,EAAe,2BAAKD,GAAN,IAAmBJ,QAASV,EAAEC,OAAOH,UAErDC,SAAU,SAAAC,GAAC,OACTe,EAAe,2BAAKD,GAAN,IAAmBJ,QAASV,EAAEC,OAAOH,YAGvD,cAAC,IAAD,CACED,YAAY,wBACZC,MAAOgB,EAAYH,OACnBP,UAAQ,IAEV,cAAC,IAAD,CAAQF,QAASkB,EAAjB,sC,SCyFOtH,MA1Nf,WAAqB,IAAD,QAClB,EAA8CkE,mBAAS,IAAvD,mBAAOuD,EAAP,KAAwBC,EAAxB,KACA,EAAkCxD,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAwBd,mBAAS,CAC/BU,KAAM,GACNC,OAAQ,KAFV,mBAAO3E,EAAP,KAAa4E,EAAb,KAIA,EAAgCZ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBoD,EAAjB,KACA,EAAwBzD,mBAAS,CAC/BN,WAAY,GACZL,aAAc,GACdC,YAAa,GACbK,MAAO,OACPH,aAAc,GACdI,UAAW,KANb,mBAAO8D,EAAP,KAAaC,EAAb,KAQA,EAAkC3D,mBAAS,CACzCN,WAAY,GACZL,aAAc,GACdG,aAAc,GACdI,UAAW,GACXS,SAAU,KALZ,mBAAOuD,EAAP,KAAkBC,EAAlB,KAOA,EAAkC7D,oBAAS,GAA3C,mBAAO8D,EAAP,KAAkBC,EAAlB,KAEMrC,EAAU,uCAAG,4BAAAxF,EAAA,sEACE2D,EAAK7D,EAAK0E,MADZ,QACbC,EADa,SAGf8C,EAAY9C,GAHG,2CAAH,qDAOVqD,EAAW,uCAAG,4BAAA9H,EAAA,6DAClB4E,GAAa,GADK,SAEE9B,EAAMqB,EAAUkD,GAFlB,QAEdlG,EAFc,UAKhBjC,OAAOG,MAAM,0BACb6F,QAAQC,IAAIhE,IAEdyD,GAAa,GARK,2CAAH,qDAWXmD,GAAe,uCAAG,4BAAA/H,EAAA,sEACHqC,EACjBqF,EAAUlE,WACVkE,EAAUvE,aACVkE,GAJoB,QAClB5C,EADkB,UAOpBvF,OAAOG,MAAM,8BACb6F,QAAQC,IAAIV,IARQ,2CAAH,qDAYfuD,GAAsB,uCAAG,4BAAAhI,EAAA,sEACV4C,EACjB8E,EAAUpE,aACV+D,GAH2B,QACzB5C,EADyB,UAM3BvF,OAAOG,MAAM,sCACb6F,QAAQC,IAAIV,IAPe,2CAAH,qDAWtBwD,GAAiB,uCAAG,4BAAAjI,EAAA,sEACLuC,EAAYmF,EAAUvD,SAAUkD,GAD3B,QACpB5C,EADoB,UAGtBvF,OAAOG,MAAM,gCACb6F,QAAQC,IAAIV,IAJU,2CAAH,qDAQjByD,GAAe,uCAAG,4BAAAlI,EAAA,yDACM,SAAxB0H,EAAUhE,WAAgD,UAAxBgE,EAAUhE,UAD1B,uBAEpBxE,OAAOG,MAAM,sCAFO,0CAKHqD,EAAWgF,EAAUhE,UAAW2D,GAL7B,QAKlB5C,EALkB,UAOpBvF,OAAOG,MAAM,8BACb6F,QAAQC,IAAIV,IARQ,2CAAH,qDAYf0D,GAAO,uCAAG,4BAAAnI,EAAA,sEACKgD,EAAKqE,GADV,QACV5C,EADU,UAGZgD,EAAQhD,GACRS,QAAQC,IAAIV,IAJA,2CAAH,qDAQb,OACE,cAAC,IAAD,CAAWgB,KAAK,eAAhB,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAWA,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,gCACA,cAAC,IAAD,CACEC,YAAY,mBACZC,MAAOyB,EACPxB,SAAU,SAAAC,GAAC,OAAIwB,EAAmBxB,EAAEC,OAAOH,UAE7C,cAAC,IAAD,CAAQI,QAASmC,GAAjB,yBAGF,eAAC,IAAD,CAAW1C,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,2BACA,cAAC,IAAD,CAAMO,SAAS,KAAf,0BACA,cAAC,IAAD,CACEN,YAAY,kBACZC,MAAO9F,EAAK0E,KACZqB,SAAU,SAAAC,GAAC,OAAIpB,EAAQ,2BAAK5E,GAAN,IAAY0E,KAAMsB,EAAEC,OAAOH,YAEnD,cAAC,IAAD,CAAQI,QAASR,EAAjB,kBACA,cAAC,IAAD,CAAOG,YAAY,WAAWC,MAAOzB,EAAU+B,UAAQ,IAEvD,cAAC,IAAD,CAAQF,QAAS8B,EAAjB,SACGnD,EAAY,cAAC,IAAD,IAAc,aAIV,KAApB6C,EAAKhE,YACJ,eAAC,IAAD,WACE,eAAC,IAAD,oCAA6BgE,EAAKhE,WAAa,KAA/C,OACA,eAAC,IAAD,6CACkCgE,EAAKrE,aADvC,mCAEkBqE,EAAKpE,YAFvB,UAE2C,OAE3C,eAAC,IAAD,0CAAmCoE,EAAKlE,aAAxC,OACA,eAAC,IAAD,oCAA6BkE,EAAK9D,UAAU0E,WAA5C,WAIH,UAAAlJ,OAAOC,gBAAP,eAAiB+B,mBAChB,UAAAsG,EAAK/D,aAAL,eAAY4E,kBAAZ,UACEnJ,OAAOC,gBADT,iBACE,EAAiB+B,uBADnB,aACE,EAAkCmH,gBAClC,cAAC,IAAD,CAAQrC,QAAS,kBAAM6B,GAAcD,IAArC,6BAKHA,GACC,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,eAAC,IAAD,CAAWnC,KAAK,eAAeC,aAAa,IAA5C,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,YAAY,cACZC,MAAO8B,EAAUlE,WACjBqC,SAAU,SAAAC,GAAC,OACT6B,EAAa,2BAAKD,GAAN,IAAiBlE,WAAYsC,EAAEC,OAAOH,YAGtD,cAAC,IAAD,CAAMK,SAAS,KAAf,yCAEF,eAAC,IAAD,WACE,cAAC,IAAD,CACEN,YAAY,gBACZC,MAAO8B,EAAUvE,aACjB0C,SAAU,SAAAC,GAAC,OACT6B,EAAa,2BAAKD,GAAN,IAAiBvE,aAAc2C,EAAEC,OAAOH,YAGxD,cAAC,IAAD,CAAMK,SAAS,KAAf,oDAEF,cAAC,IAAD,CAAQD,QAAS+B,GAAjB,8BAGF,eAAC,IAAD,CAAWtC,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,6BACA,cAAC,IAAD,CACEC,YAAY,gBACZC,MAAO8B,EAAUpE,aACjB8D,QAAS,SAAAtB,GAAC,OACR6B,EAAa,2BAAKD,GAAN,IAAiBpE,aAAcwC,EAAEC,OAAOH,UAEtDC,SAAU,SAAAC,GAAC,OACT6B,EAAa,2BAAKD,GAAN,IAAiBpE,aAAcwC,EAAEC,OAAOH,YAGxD,cAAC,IAAD,CAAQI,QAASgC,GAAjB,oCAIF,eAAC,IAAD,CAAWvC,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,8BACA,cAAC,IAAD,CACEC,YAAY,eACZC,MAAO8B,EAAUvD,SACjBiD,QAAS,SAAAtB,GAAC,OACR6B,EAAa,2BAAKD,GAAN,IAAiBvD,SAAU2B,EAAEC,OAAOH,UAElDC,SAAU,SAAAC,GAAC,OACT6B,EAAa,2BAAKD,GAAN,IAAiBvD,SAAU2B,EAAEC,OAAOH,YAGpD,cAAC,IAAD,CAAQI,QAASiC,GAAjB,iCAEF,eAAC,IAAD,CAAWxC,KAAK,eAAeC,aAAa,IAA5C,UACE,cAAC,IAAD,6BACA,cAAC,IAAD,CACEC,YAAY,aACZC,MAAO8B,EAAUhE,UACjBmC,SAAU,SAAAC,GAAC,OACT6B,EAAa,2BAAKD,GAAN,IAAiBhE,UAAWoC,EAAEC,OAAOH,YAGrD,cAAC,IAAD,CAAQI,QAASkC,GAAjB,wC,6BClODI,GAAoB,SAAAC,GAC/B,IAAQC,EAAoBC,cAApBD,gBACFhE,EAAOkE,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,KAAQC,MAE7C,OACE,cAAC,KAAD,aACEC,KAAK,KACL7C,SAAS,KACT,iCAAyBzB,EAAzB,SACAuE,QAAQ,QACRC,MAAM,UACNC,WAAW,IACXjD,QAASwC,EACTU,KAAM,cAACP,EAAD,KACFJ,KC4CKY,OA5Cf,WACE,MAAgCrF,mBAAS,IAAzC,mBAAOsF,EAAP,KAAiBC,EAAjB,KAEMC,EAAW,uCAAG,4BAAAtJ,EAAA,sEACDD,IADC,OACdI,EADc,OAElBkJ,EAAYlJ,EAAK,IACjB+E,QAAQC,IAAIiE,GAHM,2CAAH,qDAMjB,OACE,cAAC,IAAD,CAAgBG,MAAOA,QAAvB,SACE,eAAC,IAAD,CAAKC,UAAU,SAASvD,SAAS,KAAjC,UACE,eAAC,IAAD,CAAMwD,eAAe,gBAArB,UACE,cAAC,GAAD,IACA,cAAC,IAAD,CAAQzD,QAASsD,EAAjB,SACGF,EAAQ,iBACFA,QADE,IACFA,OADE,EACFA,EAAUM,UAAU,EAAG,IADrB,qBAC8BN,QAD9B,IAC8BA,OAD9B,EAC8BA,EAAUM,UAAU,GAAI,KAC3D,eAIR,eAAC,IAAD,CAAMC,UAAQ,EAACZ,QAAQ,WAAvB,UACE,eAAC,IAAD,CAASa,GAAG,MAAZ,UACE,cAAC,IAAD,uBACA,cAAC,IAAD,oBACA,cAAC,IAAD,0BAEF,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,kBC1CCC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BpL,OAAOqL,SAASC,UAEe,UAA7BtL,OAAOqL,SAASC,UAEhBtL,OAAOqL,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,GAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhE,GACLjC,QAAQiC,MAAMA,EAAM/G,YClH5ByJ,O","file":"static/js/main.65bb25c3.chunk.js","sourcesContent":["const Web3 = require('web3');\r\n\r\nlet web3;\r\n\r\nif (typeof window !== 'undefined' && typeof window.ethereum !== 'undefined') {\r\n  //we are in the browser and metamask is running\r\n  web3 = new Web3(Web3.givenProvider);\r\n} else {\r\n  //we are on the server or the user don't have metamask\r\n\r\n  window.alert('Please Install Metamask');\r\n  // const provider = new Web3.providers.HttpProvider(\r\n  //     \"https://data-seed-prebsc-1-s1.binance.org:8545\"\r\n  // );\r\n  // web3 = new Web3(provider);\r\n}\r\n\r\nexport default web3;\r\n","import web3 from '../web3';\r\nimport ERC20 from '../abis/ERC20.json';\r\n\r\nfunction instance(_address) {\r\n  return new web3.eth.Contract(ERC20.abi, _address);\r\n}\r\n\r\nexport default instance;\r\n","import web3 from '../web3';\r\nimport Password from '../abis/passwordContract.json';\r\n\r\nfunction instance(_address) {\r\n  return new web3.eth.Contract(Password.abi, _address);\r\n}\r\n\r\nexport default instance;\r\n","import web3 from '../web3';\r\nimport deployer from '../abis/contractDeployer.json';\r\n\r\nconst deployerAddress = '0xcf3588Db07488C316d0A500470BE01b29DA35F58';\r\n\r\nfunction instance() {\r\n  return new web3.eth.Contract(deployer.abi, deployerAddress);\r\n}\r\n\r\nexport default instance;\r\n","import web3 from '../web3';\r\nimport hash from '../abis/hash.json';\r\n\r\nconst hashAddress = '0x86F2961828469A8dCE2C1d36F7B70672516ce00a';\r\n\r\nfunction instance() {\r\n  return new web3.eth.Contract(hash.abi, hashAddress);\r\n}\r\n\r\nexport default instance;\r\n","import web3 from '../web3';\r\nimport ERC20 from '../interfaces/ERC20';\r\nimport Password from '../interfaces/password';\r\nimport Deployer from '../interfaces/deployer';\r\nimport hash from '../interfaces/hash';\r\n\r\nconst { ethereum } = window;\r\n\r\nexport const ethEnabled = async () => {\r\n  try {\r\n    let user = await ethereum.request({ method: 'eth_requestAccounts' });\r\n    return user;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const deployPassword = async (\r\n  _password,\r\n  _tokLimit,\r\n  _addrLimit,\r\n  _tokenAddress\r\n) => {\r\n  let instance = await Deployer();\r\n  let limit = web3.utils.toWei(_tokLimit);\r\n  try {\r\n    let receipt = await instance.methods\r\n      .createPassword(_password, limit, _addrLimit, _tokenAddress)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const deployToken = async (_name, _symbol) => {\r\n  let instance = await Deployer();\r\n  try {\r\n    let receipt = await instance.methods\r\n      .createToken(_name, _symbol)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const deployedPasswords = async () => {\r\n  let instance = await Deployer();\r\n  try {\r\n    let receipt = await instance.methods.getDeployedPasswords().call();\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const deployedTokens = async () => {\r\n  let instance = await Deployer();\r\n  try {\r\n    let receipt = await instance.methods.getDeployedTokens().call();\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const MintTokens = async (_to, _amount, _contractAddress) => {\r\n  let instance = await ERC20(_contractAddress);\r\n  try {\r\n    let amount = web3.utils.toWei(_amount);\r\n    let receipt = await instance.methods\r\n      .mint(_to, amount)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const setMinter = async (_minter, _status, _contractAddress) => {\r\n  let instance = await ERC20(_contractAddress);\r\n  try {\r\n    let receipt = await instance.methods\r\n      .setIsMinter(_minter, _status)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const checkIsMinter = async (_address, _contractAddress) => {\r\n  let instance = await ERC20(_contractAddress);\r\n  try {\r\n    let receipt = await instance.methods.isMinter(_address).call();\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const newLimits = async (_tokLimit, _addrLimit, _contractAddress) => {\r\n  let instance = await Password(_contractAddress);\r\n  try {\r\n    let limit = web3.utils.toWei(_tokLimit);\r\n    let receipt = await instance.methods\r\n      .changeLimits(limit, _addrLimit)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const newPassword = async (_passwordCode, _contractAddress) => {\r\n  let instance = await Password(_contractAddress);\r\n  try {\r\n    let receipt = await instance.methods\r\n      .changePassword(_passwordCode)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const shouldMint = async (_status, _contractAddress) => {\r\n  let instance = await Password(_contractAddress);\r\n  try {\r\n    let receipt = await instance.methods\r\n      .changeShouldMint(_status)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const setTokenContract = async (_tokenAddress, _contractAddress) => {\r\n  let instance = await Password(_contractAddress);\r\n  try {\r\n    let receipt = await instance.methods\r\n      .changeTokenContract(_tokenAddress)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const claim = async (_password, _contractAddress) => {\r\n  let instance = await Password(_contractAddress);\r\n  try {\r\n    let receipt = await instance.methods\r\n      .claimToken(_password)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const Info = async _passwordAddress => {\r\n  let instance = await Password(_passwordAddress);\r\n\r\n  try {\r\n    let addressLimit = await instance.methods.addrLimit().call();\r\n    let countClaims = await instance.methods\r\n      .countClaims(window.ethereum.selectedAddress)\r\n      .call();\r\n    let addressToken = await instance.methods.tokenAddress().call();\r\n    let tokenLimit = await instance.methods.tokLimit().call();\r\n    let owner = await instance.methods.owner().call();\r\n    let isMinting = await instance.methods.shouldMint().call();\r\n\r\n    return {\r\n      addressLimit,\r\n      countClaims,\r\n      addressToken,\r\n      tokenLimit,\r\n      owner,\r\n      isMinting,\r\n    };\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n\r\nexport const Hash = async _text => {\r\n  let instance = await hash();\r\n  try {\r\n    let receipt = await instance.methods.getHash(_text).call();\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    window.alert(error.message);\r\n  }\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  deployPassword,\r\n  deployToken,\r\n  Hash,\r\n} from '../blockchain/functions/functions';\r\nimport {\r\n  Container,\r\n  Button,\r\n  Text,\r\n  Input,\r\n  NumberInput,\r\n  NumberInputField,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\n\r\nfunction Deployer() {\r\n  const [tokenInfo, setTokenInfo] = useState({\r\n    name: '',\r\n    symbol: '',\r\n  });\r\n  const [passwordInfo, setPasswordInfo] = useState({\r\n    password: '',\r\n    toknLimit: '',\r\n    addrLimit: '',\r\n    tknAddr: '',\r\n  });\r\n  const [hash, setHash] = useState({\r\n    text: '',\r\n    result: '',\r\n  });\r\n  const [isSending, setIsSending] = useState(false);\r\n\r\n  const handleDeployToken = async () => {\r\n    setIsSending(true);\r\n    let receipt = await deployToken(tokenInfo.name, tokenInfo.symbol);\r\n    if (receipt) {\r\n      window.alert(\r\n        `Token Deployed to the Address: ${receipt.events.tokenDeploy.returnValues.newTokenAddress}... Please Save this Address.`\r\n      );\r\n      console.log(receipt);\r\n    }\r\n    setIsSending(false);\r\n  };\r\n  const handleDeployPassword = async () => {\r\n    setIsSending(true);\r\n    if (checkFields()) {\r\n      let receipt = await deployPassword(\r\n        passwordInfo.password,\r\n        passwordInfo.toknLimit,\r\n        passwordInfo.addrLimit,\r\n        passwordInfo.tknAddr\r\n      );\r\n      if (receipt) {\r\n        console.log(receipt);\r\n        window.alert(\r\n          `Contract Deployed to the Address: ${receipt.events.passwordDeploy.returnValues.newPasswordAddress}... Please Save this Address.`\r\n        );\r\n      }\r\n    }\r\n    setIsSending(false);\r\n  };\r\n  const handleHash = async () => {\r\n    let result = await Hash(hash.text);\r\n    if (result) {\r\n      setPasswordInfo({\r\n        ...passwordInfo,\r\n        password: result,\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkFields = () => {\r\n    let { password, toknLimit, addrLimit, tknAddr } = passwordInfo;\r\n    if (\r\n      password !== '' &&\r\n      toknLimit !== '' &&\r\n      addrLimit !== '' &&\r\n      tknAddr !== ''\r\n    ) {\r\n      return true;\r\n    } else {\r\n      window.alert('please complete all the fields');\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxW=\"container.xl\">\r\n      <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n        <Text>Deploy Token</Text>\r\n        <Input\r\n          placeholder=\"Name\"\r\n          value={tokenInfo.name}\r\n          onChange={e =>\r\n            setTokenInfo({\r\n              ...tokenInfo,\r\n              name: e.target.value,\r\n            })\r\n          }\r\n        />\r\n        <Input\r\n          placeholder=\"Symbol\"\r\n          value={tokenInfo.symbol}\r\n          onChange={e =>\r\n            setTokenInfo({\r\n              ...tokenInfo,\r\n              symbol: e.target.value,\r\n            })\r\n          }\r\n        />\r\n        <Button onClick={handleDeployToken}>\r\n          {' '}\r\n          {isSending ? <Spinner /> : 'Deploy'}\r\n        </Button>\r\n      </Container>\r\n      <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n        <Text>Deploy Password Contract</Text>\r\n        <Text fontSize=\"sm\">Text to Hash</Text>\r\n        <Input\r\n          placeholder=\"Text to Convert\"\r\n          value={hash.text}\r\n          onChange={e => setHash({ ...hash, text: e.target.value })}\r\n        />\r\n\r\n        <Button onClick={handleHash}>Hash</Button>\r\n        <Input placeholder=\"¨Password\" value={passwordInfo.password} readOnly />\r\n        <NumberInput>\r\n          <NumberInputField\r\n            placeholder=\"Token Limit\"\r\n            value={passwordInfo.toknLimit}\r\n            onChange={e =>\r\n              setPasswordInfo({\r\n                ...passwordInfo,\r\n                toknLimit: e.target.value,\r\n              })\r\n            }\r\n          />\r\n        </NumberInput>\r\n        <NumberInput>\r\n          <NumberInputField\r\n            placeholder=\"Address Limit\"\r\n            value={passwordInfo.addrLimit}\r\n            onChange={e =>\r\n              setPasswordInfo({\r\n                ...passwordInfo,\r\n                addrLimit: e.target.value,\r\n              })\r\n            }\r\n          />\r\n        </NumberInput>\r\n        <Input\r\n          placeholder=\"Token Address\"\r\n          value={passwordInfo.tknAddr}\r\n          onChange={e =>\r\n            setPasswordInfo({ ...passwordInfo, tknAddr: e.target.value })\r\n          }\r\n        />\r\n        <Button onClick={handleDeployPassword}>\r\n          {' '}\r\n          {isSending ? <Spinner /> : 'Deploy'}\r\n        </Button>\r\n      </Container>\r\n      <Container maxW=\"container.sm\" marginBottom=\"5\"></Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Deployer;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  MintTokens,\r\n  setMinter,\r\n  checkIsMinter,\r\n} from '../blockchain/functions/functions';\r\nimport {\r\n  Container,\r\n  Button,\r\n  Text,\r\n  Input,\r\n  NumberInput,\r\n  NumberInputField,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\n\r\nfunction Token() {\r\n  const [tokenAddress, setTokenAddress] = useState('');\r\n  const [isSending, setIsSending] = useState(false);\r\n  const [mintInfo, setMintInfo] = useState({\r\n    recipient: '',\r\n    amount: '',\r\n  });\r\n  const [isMinterInfo, setIsMinterInfo] = useState({\r\n    address: '',\r\n    status: '',\r\n  });\r\n  const [checkMinter, setCheckMinter] = useState({\r\n    address: '',\r\n    status: '',\r\n  });\r\n\r\n  const handleMint = async () => {\r\n    setIsSending(true);\r\n    let receipt = await MintTokens(\r\n      mintInfo.recipient,\r\n      mintInfo.amount,\r\n      tokenAddress\r\n    );\r\n    if (receipt) {\r\n      window.alert(\r\n        `Transaction Succesful! ${\r\n          receipt.events.Transfer.returnValues.value / 1e18\r\n        } tokens minted to the address ${\r\n          receipt.events.Transfer.returnValues.to\r\n        }`\r\n      );\r\n      console.log(receipt);\r\n    }\r\n    setIsSending(false);\r\n  };\r\n\r\n  const handleSetMinter = async () => {\r\n    setIsSending(true);\r\n    if (isMinterInfo.status !== 'true' && isMinterInfo.status !== 'false') {\r\n      window.alert('Select true or false as status.');\r\n      return;\r\n    }\r\n    let receipt = await setMinter(\r\n      isMinterInfo.address,\r\n      isMinterInfo.status,\r\n      tokenAddress\r\n    );\r\n    if (receipt) {\r\n      window.alert('The Transaction was Succesful');\r\n      console.log(receipt);\r\n    }\r\n    setIsSending(false);\r\n  };\r\n\r\n  const handleCheckMinter = async () => {\r\n    let receipt = await checkIsMinter(checkMinter.address, tokenAddress);\r\n    try {\r\n      setCheckMinter({ ...setCheckMinter, status: receipt });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxW=\"container.xl\">\r\n      <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n        <Text>Token Address</Text>\r\n        <Input\r\n          placeholder=\"Token Address\"\r\n          value={tokenAddress}\r\n          onChange={e => setTokenAddress(e.target.value)}\r\n        />\r\n      </Container>\r\n\r\n      <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n        <Text>Mint Token</Text>\r\n        <Input\r\n          placeholder=\"Recipient Address\"\r\n          value={mintInfo.recipient}\r\n          onChange={e =>\r\n            setMintInfo({ ...mintInfo, recipient: e.target.value })\r\n          }\r\n        />\r\n        <NumberInput>\r\n          <NumberInputField\r\n            placeholder=\"Amount to Mint\"\r\n            value={mintInfo.amount}\r\n            onChange={e => setMintInfo({ ...mintInfo, amount: e.target.value })}\r\n          />\r\n        </NumberInput>\r\n        <Button onClick={handleMint}>\r\n          {isSending ? <Spinner /> : 'Mint'}{' '}\r\n        </Button>\r\n      </Container>\r\n\r\n      <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n        <Text>Set Minter Role</Text>\r\n        <Input\r\n          placeholder=\"Minter Address\"\r\n          value={isMinterInfo.address}\r\n          onChange={e =>\r\n            setIsMinterInfo({ ...isMinterInfo, address: e.target.value })\r\n          }\r\n        />\r\n        <Input\r\n          placeholder=\"Status: true or false\"\r\n          value={isMinterInfo.status}\r\n          onChange={e =>\r\n            setIsMinterInfo({ ...isMinterInfo, status: e.target.value })\r\n          }\r\n        />\r\n        <Button onClick={handleSetMinter}>\r\n          {' '}\r\n          {isSending ? <Spinner /> : 'Set Minter'}\r\n        </Button>\r\n      </Container>\r\n\r\n      <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n        <Text>Check Minter Role</Text>\r\n        <Input\r\n          placeholder=\"Minter Address\"\r\n          value={checkMinter.address}\r\n          onPaste={e =>\r\n            setCheckMinter({ ...checkMinter, address: e.target.value })\r\n          }\r\n          onChange={e =>\r\n            setCheckMinter({ ...checkMinter, address: e.target.value })\r\n          }\r\n        />\r\n        <Input\r\n          placeholder=\"Status: true or false\"\r\n          value={checkMinter.status}\r\n          readOnly\r\n        />\r\n        <Button onClick={handleCheckMinter}>Check Minter Role</Button>\r\n      </Container>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Token;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  newLimits,\r\n  newPassword,\r\n  shouldMint,\r\n  setTokenContract,\r\n  claim,\r\n  Info,\r\n  Hash,\r\n} from '../blockchain/functions/functions';\r\nimport {\r\n  Container,\r\n  Button,\r\n  Text,\r\n  Input,\r\n  NumberInput,\r\n  NumberInputField,\r\n  FormControl,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\n\r\nfunction Password() {\r\n  const [contractAddress, setContractAddress] = useState('');\r\n  const [isSending, setIsSending] = useState(false);\r\n  const [hash, setHash] = useState({\r\n    text: '',\r\n    result: '',\r\n  });\r\n  const [password, setPassword] = useState('');\r\n  const [info, setInfo] = useState({\r\n    tokenLimit: '',\r\n    addressLimit: '',\r\n    countClaims: '',\r\n    owner: '0x00',\r\n    addressToken: '',\r\n    isMinting: '',\r\n  });\r\n  const [newParams, setNewParams] = useState({\r\n    tokenLimit: '',\r\n    addressLimit: '',\r\n    addressToken: '',\r\n    isMinting: '',\r\n    password: '',\r\n  });\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const handleHash = async () => {\r\n    let result = await Hash(hash.text);\r\n    if (result) {\r\n      setPassword(result);\r\n    }\r\n  };\r\n\r\n  const handleClaim = async () => {\r\n    setIsSending(true);\r\n    let receipt = await claim(password, contractAddress);\r\n\r\n    if (receipt) {\r\n      window.alert('Transaction Succesfull');\r\n      console.log(receipt);\r\n    }\r\n    setIsSending(false);\r\n  };\r\n\r\n  const handleNewLimits = async () => {\r\n    let result = await newLimits(\r\n      newParams.tokenLimit,\r\n      newParams.addressLimit,\r\n      contractAddress\r\n    );\r\n    if (result) {\r\n      window.alert('Limits changed succesfully');\r\n      console.log(result);\r\n    }\r\n  };\r\n\r\n  const handleNewTokenContract = async () => {\r\n    let result = await setTokenContract(\r\n      newParams.addressToken,\r\n      contractAddress\r\n    );\r\n    if (result) {\r\n      window.alert('Token Contract changed succesfully');\r\n      console.log(result);\r\n    }\r\n  };\r\n\r\n  const handleNewPassword = async () => {\r\n    let result = await newPassword(newParams.password, contractAddress);\r\n    if (result) {\r\n      window.alert('Password changed succesfully');\r\n      console.log(result);\r\n    }\r\n  };\r\n\r\n  const handleIsMinting = async () => {\r\n    if (newParams.isMinting !== 'true' && newParams.isMinting !== 'false') {\r\n      window.alert('New status should be true or false');\r\n      return;\r\n    }\r\n    let result = await shouldMint(newParams.isMinting, contractAddress);\r\n    if (result) {\r\n      window.alert('Status changed succesfully');\r\n      console.log(result);\r\n    }\r\n  };\r\n\r\n  const getInfo = async () => {\r\n    let result = await Info(contractAddress);\r\n    if (result) {\r\n      setInfo(result);\r\n      console.log(result);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxW=\"container.xl\">\r\n      <FormControl>\r\n        <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n          <Text>Contract Address </Text>\r\n          <Input\r\n            placeholder=\"Contract Address\"\r\n            value={contractAddress}\r\n            onChange={e => setContractAddress(e.target.value)}\r\n          />\r\n          <Button onClick={getInfo}>Get Info</Button>\r\n        </Container>\r\n\r\n        <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n          <Text>Claim Tokens</Text>\r\n          <Text fontSize=\"sm\">Text to Hash</Text>\r\n          <Input\r\n            placeholder=\"Text to Convert\"\r\n            value={hash.text}\r\n            onChange={e => setHash({ ...hash, text: e.target.value })}\r\n          />\r\n          <Button onClick={handleHash}>Hash</Button>\r\n          <Input placeholder=\"Password\" value={password} readOnly />\r\n\r\n          <Button onClick={handleClaim}>\r\n            {isSending ? <Spinner /> : 'Claim'}\r\n          </Button>\r\n        </Container>\r\n\r\n        {info.tokenLimit !== '' && (\r\n          <Container>\r\n            <Text>Token Limit is set on {info.tokenLimit / 1e18} </Text>\r\n            <Text>\r\n              Number of claims by account is {info.addressLimit}, at this moment\r\n              you have claim {info.countClaims} times.{' '}\r\n            </Text>\r\n            <Text>The address of the token is {info.addressToken} </Text>\r\n            <Text>Should mint option is {info.isMinting.toString()} </Text>\r\n          </Container>\r\n        )}\r\n\r\n        {window.ethereum?.selectedAddress &&\r\n          info.owner?.toUpperCase() ===\r\n            window.ethereum?.selectedAddress?.toUpperCase() && (\r\n            <Button onClick={() => setIsEditing(!isEditing)}>\r\n              Manager Options\r\n            </Button>\r\n          )}\r\n\r\n        {isEditing && (\r\n          <Container>\r\n            <Text>Edit Contract Parameters</Text>\r\n            <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n              <NumberInput>\r\n                <NumberInputField\r\n                  placeholder=\"Token Limit\"\r\n                  value={newParams.tokenLimit}\r\n                  onChange={e =>\r\n                    setNewParams({ ...newParams, tokenLimit: e.target.value })\r\n                  }\r\n                />\r\n                <Text fontSize=\"xs\">Limit of Tokens To Claim</Text>\r\n              </NumberInput>\r\n              <NumberInput>\r\n                <NumberInputField\r\n                  placeholder=\"Address Limit\"\r\n                  value={newParams.addressLimit}\r\n                  onChange={e =>\r\n                    setNewParams({ ...newParams, addressLimit: e.target.value })\r\n                  }\r\n                />\r\n                <Text fontSize=\"xs\">Limit of Times an Account can Claim</Text>\r\n              </NumberInput>\r\n              <Button onClick={handleNewLimits}>Change Limits</Button>\r\n            </Container>\r\n\r\n            <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n              <Text>Token Contract</Text>\r\n              <Input\r\n                placeholder=\"Token Address\"\r\n                value={newParams.addressToken}\r\n                onPaste={e =>\r\n                  setNewParams({ ...newParams, addressToken: e.target.value })\r\n                }\r\n                onChange={e =>\r\n                  setNewParams({ ...newParams, addressToken: e.target.value })\r\n                }\r\n              />\r\n              <Button onClick={handleNewTokenContract}>\r\n                Check Token Address\r\n              </Button>\r\n            </Container>\r\n            <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n              <Text>Change Password</Text>\r\n              <Input\r\n                placeholder=\"New Password\"\r\n                value={newParams.password}\r\n                onPaste={e =>\r\n                  setNewParams({ ...newParams, password: e.target.value })\r\n                }\r\n                onChange={e =>\r\n                  setNewParams({ ...newParams, password: e.target.value })\r\n                }\r\n              />\r\n              <Button onClick={handleNewPassword}>Change Password </Button>\r\n            </Container>\r\n            <Container maxW=\"container.sm\" marginBottom=\"5\">\r\n              <Text>Set is Minting</Text>\r\n              <Input\r\n                placeholder=\"New Status\"\r\n                value={newParams.isMinting}\r\n                onChange={e =>\r\n                  setNewParams({ ...newParams, isMinting: e.target.value })\r\n                }\r\n              />\r\n              <Button onClick={handleIsMinting}>Change Status </Button>\r\n            </Container>\r\n          </Container>\r\n        )}\r\n      </FormControl>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Password;\r\n","import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Tabs,\n  Tab,\n  TabPanels,\n  TabPanel,\n  TabList,\n  Button,\n  theme,\n  Flex,\n} from '@chakra-ui/react';\nimport { ethEnabled } from './components/blockchain/functions/functions';\nimport Deployer from './components/deployer';\nimport Token from './components/token';\nimport Password from './components/password';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nfunction App() {\n  const [accounts, setAccounts] = useState('');\n\n  const handleLogin = async () => {\n    let user = await ethEnabled();\n    setAccounts(user[0]);\n    console.log(accounts);\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Flex justifyContent=\"space-between\">\n          <ColorModeSwitcher />\n          <Button onClick={handleLogin}>\n            {accounts\n              ? `${accounts?.substring(0, 10)}...${accounts?.substring(36, 42)}`\n              : 'Connect'}\n          </Button>\n        </Flex>\n\n        <Tabs isFitted variant=\"enclosed\">\n          <TabList mb=\"1em\">\n            <Tab>Deployer</Tab>\n            <Tab>Token</Tab>\n            <Tab>Password</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Deployer />\n            </TabPanel>\n            <TabPanel>\n              <Token />\n            </TabPanel>\n            <TabPanel>\n              <Password />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}